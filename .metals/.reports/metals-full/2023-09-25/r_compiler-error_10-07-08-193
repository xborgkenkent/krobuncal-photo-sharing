scala.reflect.internal.Types$TypeError: illegal cyclic inheritance involving class PostImageController
occurred in the presentation compiler.

action parameters:
offset: 1360
uri: file://<WORKSPACE>/app/controllers/PostImageController.scala
text:
package controllers

import javax.inject._
import play.api._
import play.api.mvc._
import play.api.libs.json._
import play.api.libs.json.Json
import play.api.libs.functional.syntax._

import scala.concurrent.Future
import scala.concurrent.ExecutionContext
import java.util.UUID

import play.i18n._

import java.nio.file.{Files, Paths}
import java.io.File
import java.io.FileOutputStream
import models.domain.Image
import models.domain.Post
import play.api.data.Forms._
import play.api.data.Form
import scala.collection.mutable.ListBuffer
import play.api.i18n.I18nSupport
import models.repo.PostRepo
import models.repo.ImageRepo
import models.repo.CommentRepo

@Singleton
class PostImageController @Inject()(
    val postRepo: PostRepo,
    val imageRepo: ImageRepo,
    val commentRepo: CommentRepo,
    val controllerComponents: ControllerComponents)(implicit ec:ExecutionContext) extends BaseController with I18nSupport{

    val formPost = Form(
        mapping(
            "id" -> default(uuid, UUID.randomUUID),
            "photoID" -> default(uuid,UUID.randomUUID),
            "description" -> optional(text),
        )(Post.apply)(Post.unapply))

    val posts: ListBuffer[Post] = ListBuffer.empty
    val images: ListBuffer[Image] = ListBuffer.empty

    def uploadPhoto() = Action(parse.multipartFormData) { implicit request =>
       imageRepo.tab@@
        // try {
        //     val id = UUID.randomUUID

        //     formPost.bindFromRequest().fold(
        //         formWithErrors => BadRequest("formWithErrors"),
        //         data => {
        //             val post = Post(id = id, photoID = id, description = data.description)
        //             val temporaryFile = request.body.file("picture").get
            
        //             val extension = temporaryFile.filename.split("\\.+").toList.last
        //             val fileBytes = Files.readAllBytes(Paths.get(temporaryFile.ref.file.getAbsolutePath))
                    
        //             val image = Image(id, fileBytes, extension)
        //             println(fileBytes)

        //             for{
        //                 _ <- postRepo.insert(post)
        //                 _ <- imageRepo.insert(image)
        //             } yield(Ok)
        //         }
        //     )
            
        //     Redirect(routes.PostImageController.home())
        // }catch {
        //     case _ => BadRequest
        // }

  }

    def getPhoto(id: String) = Action { request =>
        val image = images.find(img => (img.id.toString==id))
        image match {
            case Some(value) => Ok(value.imageByte).as(s"image/${value.extension}")
            case None => Ok("not found")
        }
    }

    def addComment(id: String) = TODO
    //     Action { implicit request =>
    //     formPost.bindFromRequest.fold(
    //         formWithErrors => BadRequest("failed"),
    //         data => {
    //             val post = posts.find(_.id.toString==id).get
    //             //val comment = post.comments.concat(request.body.asFormUrlEncoded.get("comments"))
    //             posts.update(posts.indexOf(post), Post(id = data.id, photoID = data.photoID, description = data.description ,comments = comment.toList))
    //             Redirect(routes.PostImageController.index())
    //         }
    //     )
    // }




    def index() = Action.async { implicit request => 
        for {
            _ <- postRepo.createTable
            _ <- imageRepo.createTable
            _ <- commentRepo.createTable
        } yield(Redirect(routes.PostImageController.home()))
    }

    def home() = Action { implicit request =>
        Ok(views.html.index(posts.toList, formPost))
    }
}


error stacktrace:

